/* tslint:disable */
/* eslint-disable */
/**
 * Pets API
 * API for retrieving pet information.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetPetByIdResponse
 */
export interface GetPetByIdResponse {
    /**
     * The pet\'s unique ID.
     * @type {string}
     * @memberof GetPetByIdResponse
     */
    'id'?: string;
    /**
     * The creation date of the pet record
     * @type {string}
     * @memberof GetPetByIdResponse
     */
    'dateAdded'?: string;
    /**
     * The pet\'s name.
     * @type {string}
     * @memberof GetPetByIdResponse
     */
    'name'?: string;
    /**
     * URL of the pet.
     * @type {string}
     * @memberof GetPetByIdResponse
     */
    'photoUrl'?: string;
    /**
     * The pet\'s species.
     * @type {string}
     * @memberof GetPetByIdResponse
     */
    'species'?: string;
    /**
     * Whether the pet is available for adoption.
     * @type {boolean}
     * @memberof GetPetByIdResponse
     */
    'available'?: boolean;
    /**
     * The pet\'s birth year.
     * @type {number}
     * @memberof GetPetByIdResponse
     */
    'birthYear'?: number;
}
/**
 * 
 * @export
 * @interface GetPetsResponse
 */
export interface GetPetsResponse {
    /**
     * The pet\'s unique ID.
     * @type {string}
     * @memberof GetPetsResponse
     */
    'id'?: string;
    /**
     * The creation date of the pet record
     * @type {string}
     * @memberof GetPetsResponse
     */
    'dateAdded'?: string;
    /**
     * The pet\'s name.
     * @type {string}
     * @memberof GetPetsResponse
     */
    'name'?: string;
    /**
     * URL of the pet.
     * @type {string}
     * @memberof GetPetsResponse
     */
    'photoUrl'?: string;
    /**
     * The pet\'s species.
     * @type {string}
     * @memberof GetPetsResponse
     */
    'species'?: string;
    /**
     * Whether the pet is available for adoption.
     * @type {boolean}
     * @memberof GetPetsResponse
     */
    'available'?: boolean;
    /**
     * The pet\'s birth year.
     * @type {number}
     * @memberof GetPetsResponse
     */
    'birthYear'?: number;
}

/**
 * PetsApi - axios parameter creator
 * @export
 */
export const PetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a pet by ID
         * @param {string} id ID of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('petsIdGet', 'id', id)
            const localVarPath = `/pets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PetsApi - functional programming interface
 * @export
 */
export const PetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async petsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPetsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.petsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetsApi.petsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a pet by ID
         * @param {string} id ID of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async petsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.petsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetsApi.petsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PetsApi - factory interface
 * @export
 */
export const PetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PetsApiFp(configuration)
    return {
        /**
         * 
         * @summary List all pets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPetsResponse>> {
            return localVarFp.petsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a pet by ID
         * @param {string} id ID of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetPetByIdResponse> {
            return localVarFp.petsIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PetsApi - object-oriented interface
 * @export
 * @class PetsApi
 * @extends {BaseAPI}
 */
export class PetsApi extends BaseAPI {
    /**
     * 
     * @summary List all pets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public petsGet(options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).petsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a pet by ID
     * @param {string} id ID of the pet to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public petsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).petsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



