/* tslint:disable */
/* eslint-disable */
/**
 * Pets API
 * API for retrieving pet information.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { RequestArgs } from './base';
import { DUMMY_BASE_URL, createRequestFunction, setSearchParams, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface GetPetsResponse
 */
export interface GetPetsResponse {
  /**
   * The pet\'s unique ID.
   * @type {string}
   * @memberof GetPetsResponse
   */
  id?: string;
  /**
   * The creation date of the pet record
   * @type {string}
   * @memberof GetPetsResponse
   */
  dateAdded?: string;
  /**
   * The pet\'s name.
   * @type {string}
   * @memberof GetPetsResponse
   */
  name?: string;
  /**
   * URL of the pet.
   * @type {string}
   * @memberof GetPetsResponse
   */
  photoUrl?: string;
  /**
   * The pet\'s species.
   * @type {string}
   * @memberof GetPetsResponse
   */
  species?: string;
  /**
   * Whether the pet is available for adoption.
   * @type {boolean}
   * @memberof GetPetsResponse
   */
  available?: boolean;
  /**
   * The pet\'s birth year.
   * @type {number}
   * @memberof GetPetsResponse
   */
  birthYear?: number;
}

/**
 * PetsApi - axios parameter creator
 * @export
 */
export const PetsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary List all pets
     * @param {string} [species] Filter pets by species
     * @param {PetsGetSortByEnum} [sortBy] Sort pets by a specific field
     * @param {PetsGetSortOrderEnum} [sortOrder] Sort order (ascending or descending)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    petsGet: async (
      species?: string,
      sortBy?: PetsGetSortByEnum,
      sortOrder?: PetsGetSortOrderEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/pets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (species !== undefined) {
        localVarQueryParameter['species'] = species;
      }

      if (sortBy !== undefined) {
        localVarQueryParameter['sortBy'] = sortBy;
      }

      if (sortOrder !== undefined) {
        localVarQueryParameter['sortOrder'] = sortOrder;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PetsApi - functional programming interface
 * @export
 */
export const PetsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PetsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary List all pets
     * @param {string} [species] Filter pets by species
     * @param {PetsGetSortByEnum} [sortBy] Sort pets by a specific field
     * @param {PetsGetSortOrderEnum} [sortOrder] Sort order (ascending or descending)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async petsGet(
      species?: string,
      sortBy?: PetsGetSortByEnum,
      sortOrder?: PetsGetSortOrderEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPetsResponse>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.petsGet(
        species,
        sortBy,
        sortOrder,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PetsApi.petsGet']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PetsApi - factory interface
 * @export
 */
export const PetsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PetsApiFp(configuration);
  return {
    /**
     *
     * @summary List all pets
     * @param {string} [species] Filter pets by species
     * @param {PetsGetSortByEnum} [sortBy] Sort pets by a specific field
     * @param {PetsGetSortOrderEnum} [sortOrder] Sort order (ascending or descending)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    petsGet(
      species?: string,
      sortBy?: PetsGetSortByEnum,
      sortOrder?: PetsGetSortOrderEnum,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<GetPetsResponse>> {
      return localVarFp
        .petsGet(species, sortBy, sortOrder, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * PetsApi - object-oriented interface
 * @export
 * @class PetsApi
 * @extends {BaseAPI}
 */
export class PetsApi extends BaseAPI {
  /**
   *
   * @summary List all pets
   * @param {string} [species] Filter pets by species
   * @param {PetsGetSortByEnum} [sortBy] Sort pets by a specific field
   * @param {PetsGetSortOrderEnum} [sortOrder] Sort order (ascending or descending)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PetsApi
   */
  public petsGet(
    species?: string,
    sortBy?: PetsGetSortByEnum,
    sortOrder?: PetsGetSortOrderEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return PetsApiFp(this.configuration)
      .petsGet(species, sortBy, sortOrder, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const PetsGetSortByEnum = {
  Name: 'name',
  BirthYear: 'birthYear',
} as const;
export type PetsGetSortByEnum = (typeof PetsGetSortByEnum)[keyof typeof PetsGetSortByEnum];
/**
 * @export
 */
export const PetsGetSortOrderEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;
export type PetsGetSortOrderEnum = (typeof PetsGetSortOrderEnum)[keyof typeof PetsGetSortOrderEnum];
